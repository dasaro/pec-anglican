(def domain-language {})
(def domain-description {})
(alter-var-root #'domain-description #(assoc-in % [:cprops] []))
(alter-var-root #'domain-description #(assoc-in % [:pprops] []))
(alter-var-root #'domain-language #(assoc % :fluents (conj (:fluents domain-language) :tuberculosis)))
(alter-var-root #'domain-language #(assoc % :actions (conj (:actions domain-language) :exposure)))
(alter-var-root #'domain-language #(assoc % :actions (conj (:actions domain-language) :reactivation)))
(alter-var-root #'domain-description #(assoc-in % [:iprop :outcomes] (vec (conj (get-in % [:iprop :outcomes]) {:tuberculosis "absent"}))))
(alter-var-root #'domain-description #(assoc-in % [:iprop :probs] (vec (conj (get-in % [:iprop :probs]) (/ 2 3)))))
(alter-var-root #'domain-description #(assoc-in % [:iprop :outcomes] (vec (conj (get-in % [:iprop :outcomes]) {:tuberculosis "latent"}))))
(alter-var-root #'domain-description #(assoc-in % [:iprop :probs] (vec (conj (get-in % [:iprop :probs]) (/ 9 30)))))
(alter-var-root #'domain-description #(assoc-in % [:iprop :outcomes] (vec (conj (get-in % [:iprop :outcomes]) {:tuberculosis "active"}))))
(alter-var-root #'domain-description #(assoc-in % [:iprop :probs] (vec (conj (get-in % [:iprop :probs]) (/ 1 30)))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 0 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "absent"}))) (vals {:tuberculosis "absent"})) (= (list (get-in state (keys {:exposure "true"}))) (vals {:exposure "true"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 0 :outcomes] (vec (conj (get-in % [:cprops 0 :outcomes]) {}))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 0 :probs] (vec (conj (get-in % [:cprops 0 :probs]) (/ 2 10)))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 0 :outcomes] (vec (conj (get-in % [:cprops 0 :outcomes]) {:tuberculosis "latent"}))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 0 :probs] (vec (conj (get-in % [:cprops 0 :probs]) (/ 76 100)))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 0 :outcomes] (vec (conj (get-in % [:cprops 0 :outcomes]) {:tuberculosis "active"}))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 0 :probs] (vec (conj (get-in % [:cprops 0 :probs]) (/ 4 100)))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 1 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) (= (list (get-in state (keys {:reactivation "true"}))) (vals {:reactivation "true"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 1 :outcomes] (vec (conj (get-in % [:cprops 1 :outcomes]) {:tuberculosis "active"}))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 1 :probs] (vec (conj (get-in % [:cprops 1 :probs]) 1))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :subject] :exposure))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :instant] 0))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :outcomes] (vec (conj (get-in % [:pprops 0 :outcomes]) {:exposure "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :probs] (vec (conj (get-in % [:pprops 0 :probs]) (/ 25 100)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :outcomes] (vec (conj (get-in % [:pprops 0 :outcomes]) {:exposure "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :probs] (vec (conj (get-in % [:pprops 0 :probs]) (- 1 (/ 25 100))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :precondition] (fn [state] true)))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :subject] :exposure))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :instant] 2))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :outcomes] (vec (conj (get-in % [:pprops 1 :outcomes]) {:exposure "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :probs] (vec (conj (get-in % [:pprops 1 :probs]) (/ 9 10)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :outcomes] (vec (conj (get-in % [:pprops 1 :outcomes]) {:exposure "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :probs] (vec (conj (get-in % [:pprops 1 :probs]) (- 1 (/ 9 10))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :precondition] (fn [state] true)))
(alter-var-root #'domain-description #(assoc-in % [:pprops 2 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 2 :instant] 0))
(alter-var-root #'domain-description #(assoc-in % [:pprops 2 :outcomes] (vec (conj (get-in % [:pprops 2 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 2 :probs] (vec (conj (get-in % [:pprops 2 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 2 :outcomes] (vec (conj (get-in % [:pprops 2 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 2 :probs] (vec (conj (get-in % [:pprops 2 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 2 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 3 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 3 :instant] 1))
(alter-var-root #'domain-description #(assoc-in % [:pprops 3 :outcomes] (vec (conj (get-in % [:pprops 3 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 3 :probs] (vec (conj (get-in % [:pprops 3 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 3 :outcomes] (vec (conj (get-in % [:pprops 3 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 3 :probs] (vec (conj (get-in % [:pprops 3 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 3 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 4 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 4 :instant] 2))
(alter-var-root #'domain-description #(assoc-in % [:pprops 4 :outcomes] (vec (conj (get-in % [:pprops 4 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 4 :probs] (vec (conj (get-in % [:pprops 4 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 4 :outcomes] (vec (conj (get-in % [:pprops 4 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 4 :probs] (vec (conj (get-in % [:pprops 4 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 4 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 5 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 5 :instant] 3))
(alter-var-root #'domain-description #(assoc-in % [:pprops 5 :outcomes] (vec (conj (get-in % [:pprops 5 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 5 :probs] (vec (conj (get-in % [:pprops 5 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 5 :outcomes] (vec (conj (get-in % [:pprops 5 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 5 :probs] (vec (conj (get-in % [:pprops 5 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 5 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 6 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 6 :instant] 4))
(alter-var-root #'domain-description #(assoc-in % [:pprops 6 :outcomes] (vec (conj (get-in % [:pprops 6 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 6 :probs] (vec (conj (get-in % [:pprops 6 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 6 :outcomes] (vec (conj (get-in % [:pprops 6 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 6 :probs] (vec (conj (get-in % [:pprops 6 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 6 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 7 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 7 :instant] 5))
(alter-var-root #'domain-description #(assoc-in % [:pprops 7 :outcomes] (vec (conj (get-in % [:pprops 7 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 7 :probs] (vec (conj (get-in % [:pprops 7 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 7 :outcomes] (vec (conj (get-in % [:pprops 7 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 7 :probs] (vec (conj (get-in % [:pprops 7 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 7 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 8 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 8 :instant] 6))
(alter-var-root #'domain-description #(assoc-in % [:pprops 8 :outcomes] (vec (conj (get-in % [:pprops 8 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 8 :probs] (vec (conj (get-in % [:pprops 8 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 8 :outcomes] (vec (conj (get-in % [:pprops 8 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 8 :probs] (vec (conj (get-in % [:pprops 8 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 8 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 9 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 9 :instant] 7))
(alter-var-root #'domain-description #(assoc-in % [:pprops 9 :outcomes] (vec (conj (get-in % [:pprops 9 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 9 :probs] (vec (conj (get-in % [:pprops 9 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 9 :outcomes] (vec (conj (get-in % [:pprops 9 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 9 :probs] (vec (conj (get-in % [:pprops 9 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 9 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 10 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 10 :instant] 8))
(alter-var-root #'domain-description #(assoc-in % [:pprops 10 :outcomes] (vec (conj (get-in % [:pprops 10 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 10 :probs] (vec (conj (get-in % [:pprops 10 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 10 :outcomes] (vec (conj (get-in % [:pprops 10 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 10 :probs] (vec (conj (get-in % [:pprops 10 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 10 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 11 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 11 :instant] 9))
(alter-var-root #'domain-description #(assoc-in % [:pprops 11 :outcomes] (vec (conj (get-in % [:pprops 11 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 11 :probs] (vec (conj (get-in % [:pprops 11 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 11 :outcomes] (vec (conj (get-in % [:pprops 11 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 11 :probs] (vec (conj (get-in % [:pprops 11 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 11 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 12 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 12 :instant] 10))
(alter-var-root #'domain-description #(assoc-in % [:pprops 12 :outcomes] (vec (conj (get-in % [:pprops 12 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 12 :probs] (vec (conj (get-in % [:pprops 12 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 12 :outcomes] (vec (conj (get-in % [:pprops 12 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 12 :probs] (vec (conj (get-in % [:pprops 12 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 12 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 13 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 13 :instant] 11))
(alter-var-root #'domain-description #(assoc-in % [:pprops 13 :outcomes] (vec (conj (get-in % [:pprops 13 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 13 :probs] (vec (conj (get-in % [:pprops 13 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 13 :outcomes] (vec (conj (get-in % [:pprops 13 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 13 :probs] (vec (conj (get-in % [:pprops 13 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 13 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 14 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 14 :instant] 12))
(alter-var-root #'domain-description #(assoc-in % [:pprops 14 :outcomes] (vec (conj (get-in % [:pprops 14 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 14 :probs] (vec (conj (get-in % [:pprops 14 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 14 :outcomes] (vec (conj (get-in % [:pprops 14 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 14 :probs] (vec (conj (get-in % [:pprops 14 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 14 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 15 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 15 :instant] 13))
(alter-var-root #'domain-description #(assoc-in % [:pprops 15 :outcomes] (vec (conj (get-in % [:pprops 15 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 15 :probs] (vec (conj (get-in % [:pprops 15 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 15 :outcomes] (vec (conj (get-in % [:pprops 15 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 15 :probs] (vec (conj (get-in % [:pprops 15 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 15 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 16 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 16 :instant] 14))
(alter-var-root #'domain-description #(assoc-in % [:pprops 16 :outcomes] (vec (conj (get-in % [:pprops 16 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 16 :probs] (vec (conj (get-in % [:pprops 16 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 16 :outcomes] (vec (conj (get-in % [:pprops 16 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 16 :probs] (vec (conj (get-in % [:pprops 16 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 16 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 17 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 17 :instant] 15))
(alter-var-root #'domain-description #(assoc-in % [:pprops 17 :outcomes] (vec (conj (get-in % [:pprops 17 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 17 :probs] (vec (conj (get-in % [:pprops 17 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 17 :outcomes] (vec (conj (get-in % [:pprops 17 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 17 :probs] (vec (conj (get-in % [:pprops 17 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 17 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 18 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 18 :instant] 16))
(alter-var-root #'domain-description #(assoc-in % [:pprops 18 :outcomes] (vec (conj (get-in % [:pprops 18 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 18 :probs] (vec (conj (get-in % [:pprops 18 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 18 :outcomes] (vec (conj (get-in % [:pprops 18 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 18 :probs] (vec (conj (get-in % [:pprops 18 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 18 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 19 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 19 :instant] 17))
(alter-var-root #'domain-description #(assoc-in % [:pprops 19 :outcomes] (vec (conj (get-in % [:pprops 19 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 19 :probs] (vec (conj (get-in % [:pprops 19 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 19 :outcomes] (vec (conj (get-in % [:pprops 19 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 19 :probs] (vec (conj (get-in % [:pprops 19 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 19 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 20 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 20 :instant] 18))
(alter-var-root #'domain-description #(assoc-in % [:pprops 20 :outcomes] (vec (conj (get-in % [:pprops 20 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 20 :probs] (vec (conj (get-in % [:pprops 20 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 20 :outcomes] (vec (conj (get-in % [:pprops 20 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 20 :probs] (vec (conj (get-in % [:pprops 20 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 20 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 21 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 21 :instant] 19))
(alter-var-root #'domain-description #(assoc-in % [:pprops 21 :outcomes] (vec (conj (get-in % [:pprops 21 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 21 :probs] (vec (conj (get-in % [:pprops 21 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 21 :outcomes] (vec (conj (get-in % [:pprops 21 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 21 :probs] (vec (conj (get-in % [:pprops 21 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 21 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 22 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 22 :instant] 20))
(alter-var-root #'domain-description #(assoc-in % [:pprops 22 :outcomes] (vec (conj (get-in % [:pprops 22 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 22 :probs] (vec (conj (get-in % [:pprops 22 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 22 :outcomes] (vec (conj (get-in % [:pprops 22 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 22 :probs] (vec (conj (get-in % [:pprops 22 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 22 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 23 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 23 :instant] 21))
(alter-var-root #'domain-description #(assoc-in % [:pprops 23 :outcomes] (vec (conj (get-in % [:pprops 23 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 23 :probs] (vec (conj (get-in % [:pprops 23 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 23 :outcomes] (vec (conj (get-in % [:pprops 23 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 23 :probs] (vec (conj (get-in % [:pprops 23 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 23 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 24 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 24 :instant] 22))
(alter-var-root #'domain-description #(assoc-in % [:pprops 24 :outcomes] (vec (conj (get-in % [:pprops 24 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 24 :probs] (vec (conj (get-in % [:pprops 24 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 24 :outcomes] (vec (conj (get-in % [:pprops 24 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 24 :probs] (vec (conj (get-in % [:pprops 24 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 24 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 25 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 25 :instant] 23))
(alter-var-root #'domain-description #(assoc-in % [:pprops 25 :outcomes] (vec (conj (get-in % [:pprops 25 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 25 :probs] (vec (conj (get-in % [:pprops 25 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 25 :outcomes] (vec (conj (get-in % [:pprops 25 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 25 :probs] (vec (conj (get-in % [:pprops 25 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 25 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 26 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 26 :instant] 24))
(alter-var-root #'domain-description #(assoc-in % [:pprops 26 :outcomes] (vec (conj (get-in % [:pprops 26 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 26 :probs] (vec (conj (get-in % [:pprops 26 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 26 :outcomes] (vec (conj (get-in % [:pprops 26 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 26 :probs] (vec (conj (get-in % [:pprops 26 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 26 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 27 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 27 :instant] 25))
(alter-var-root #'domain-description #(assoc-in % [:pprops 27 :outcomes] (vec (conj (get-in % [:pprops 27 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 27 :probs] (vec (conj (get-in % [:pprops 27 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 27 :outcomes] (vec (conj (get-in % [:pprops 27 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 27 :probs] (vec (conj (get-in % [:pprops 27 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 27 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 28 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 28 :instant] 26))
(alter-var-root #'domain-description #(assoc-in % [:pprops 28 :outcomes] (vec (conj (get-in % [:pprops 28 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 28 :probs] (vec (conj (get-in % [:pprops 28 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 28 :outcomes] (vec (conj (get-in % [:pprops 28 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 28 :probs] (vec (conj (get-in % [:pprops 28 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 28 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 29 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 29 :instant] 27))
(alter-var-root #'domain-description #(assoc-in % [:pprops 29 :outcomes] (vec (conj (get-in % [:pprops 29 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 29 :probs] (vec (conj (get-in % [:pprops 29 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 29 :outcomes] (vec (conj (get-in % [:pprops 29 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 29 :probs] (vec (conj (get-in % [:pprops 29 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 29 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 30 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 30 :instant] 28))
(alter-var-root #'domain-description #(assoc-in % [:pprops 30 :outcomes] (vec (conj (get-in % [:pprops 30 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 30 :probs] (vec (conj (get-in % [:pprops 30 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 30 :outcomes] (vec (conj (get-in % [:pprops 30 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 30 :probs] (vec (conj (get-in % [:pprops 30 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 30 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 31 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 31 :instant] 29))
(alter-var-root #'domain-description #(assoc-in % [:pprops 31 :outcomes] (vec (conj (get-in % [:pprops 31 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 31 :probs] (vec (conj (get-in % [:pprops 31 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 31 :outcomes] (vec (conj (get-in % [:pprops 31 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 31 :probs] (vec (conj (get-in % [:pprops 31 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 31 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 32 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 32 :instant] 30))
(alter-var-root #'domain-description #(assoc-in % [:pprops 32 :outcomes] (vec (conj (get-in % [:pprops 32 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 32 :probs] (vec (conj (get-in % [:pprops 32 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 32 :outcomes] (vec (conj (get-in % [:pprops 32 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 32 :probs] (vec (conj (get-in % [:pprops 32 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 32 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 33 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 33 :instant] 31))
(alter-var-root #'domain-description #(assoc-in % [:pprops 33 :outcomes] (vec (conj (get-in % [:pprops 33 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 33 :probs] (vec (conj (get-in % [:pprops 33 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 33 :outcomes] (vec (conj (get-in % [:pprops 33 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 33 :probs] (vec (conj (get-in % [:pprops 33 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 33 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 34 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 34 :instant] 32))
(alter-var-root #'domain-description #(assoc-in % [:pprops 34 :outcomes] (vec (conj (get-in % [:pprops 34 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 34 :probs] (vec (conj (get-in % [:pprops 34 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 34 :outcomes] (vec (conj (get-in % [:pprops 34 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 34 :probs] (vec (conj (get-in % [:pprops 34 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 34 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 35 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 35 :instant] 33))
(alter-var-root #'domain-description #(assoc-in % [:pprops 35 :outcomes] (vec (conj (get-in % [:pprops 35 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 35 :probs] (vec (conj (get-in % [:pprops 35 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 35 :outcomes] (vec (conj (get-in % [:pprops 35 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 35 :probs] (vec (conj (get-in % [:pprops 35 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 35 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 36 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 36 :instant] 34))
(alter-var-root #'domain-description #(assoc-in % [:pprops 36 :outcomes] (vec (conj (get-in % [:pprops 36 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 36 :probs] (vec (conj (get-in % [:pprops 36 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 36 :outcomes] (vec (conj (get-in % [:pprops 36 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 36 :probs] (vec (conj (get-in % [:pprops 36 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 36 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 37 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 37 :instant] 35))
(alter-var-root #'domain-description #(assoc-in % [:pprops 37 :outcomes] (vec (conj (get-in % [:pprops 37 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 37 :probs] (vec (conj (get-in % [:pprops 37 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 37 :outcomes] (vec (conj (get-in % [:pprops 37 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 37 :probs] (vec (conj (get-in % [:pprops 37 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 37 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 38 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 38 :instant] 36))
(alter-var-root #'domain-description #(assoc-in % [:pprops 38 :outcomes] (vec (conj (get-in % [:pprops 38 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 38 :probs] (vec (conj (get-in % [:pprops 38 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 38 :outcomes] (vec (conj (get-in % [:pprops 38 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 38 :probs] (vec (conj (get-in % [:pprops 38 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 38 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 39 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 39 :instant] 37))
(alter-var-root #'domain-description #(assoc-in % [:pprops 39 :outcomes] (vec (conj (get-in % [:pprops 39 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 39 :probs] (vec (conj (get-in % [:pprops 39 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 39 :outcomes] (vec (conj (get-in % [:pprops 39 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 39 :probs] (vec (conj (get-in % [:pprops 39 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 39 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 40 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 40 :instant] 38))
(alter-var-root #'domain-description #(assoc-in % [:pprops 40 :outcomes] (vec (conj (get-in % [:pprops 40 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 40 :probs] (vec (conj (get-in % [:pprops 40 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 40 :outcomes] (vec (conj (get-in % [:pprops 40 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 40 :probs] (vec (conj (get-in % [:pprops 40 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 40 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 41 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 41 :instant] 39))
(alter-var-root #'domain-description #(assoc-in % [:pprops 41 :outcomes] (vec (conj (get-in % [:pprops 41 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 41 :probs] (vec (conj (get-in % [:pprops 41 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 41 :outcomes] (vec (conj (get-in % [:pprops 41 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 41 :probs] (vec (conj (get-in % [:pprops 41 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 41 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 42 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 42 :instant] 40))
(alter-var-root #'domain-description #(assoc-in % [:pprops 42 :outcomes] (vec (conj (get-in % [:pprops 42 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 42 :probs] (vec (conj (get-in % [:pprops 42 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 42 :outcomes] (vec (conj (get-in % [:pprops 42 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 42 :probs] (vec (conj (get-in % [:pprops 42 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 42 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 43 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 43 :instant] 41))
(alter-var-root #'domain-description #(assoc-in % [:pprops 43 :outcomes] (vec (conj (get-in % [:pprops 43 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 43 :probs] (vec (conj (get-in % [:pprops 43 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 43 :outcomes] (vec (conj (get-in % [:pprops 43 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 43 :probs] (vec (conj (get-in % [:pprops 43 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 43 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 44 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 44 :instant] 42))
(alter-var-root #'domain-description #(assoc-in % [:pprops 44 :outcomes] (vec (conj (get-in % [:pprops 44 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 44 :probs] (vec (conj (get-in % [:pprops 44 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 44 :outcomes] (vec (conj (get-in % [:pprops 44 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 44 :probs] (vec (conj (get-in % [:pprops 44 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 44 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 45 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 45 :instant] 43))
(alter-var-root #'domain-description #(assoc-in % [:pprops 45 :outcomes] (vec (conj (get-in % [:pprops 45 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 45 :probs] (vec (conj (get-in % [:pprops 45 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 45 :outcomes] (vec (conj (get-in % [:pprops 45 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 45 :probs] (vec (conj (get-in % [:pprops 45 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 45 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 46 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 46 :instant] 44))
(alter-var-root #'domain-description #(assoc-in % [:pprops 46 :outcomes] (vec (conj (get-in % [:pprops 46 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 46 :probs] (vec (conj (get-in % [:pprops 46 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 46 :outcomes] (vec (conj (get-in % [:pprops 46 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 46 :probs] (vec (conj (get-in % [:pprops 46 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 46 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 47 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 47 :instant] 45))
(alter-var-root #'domain-description #(assoc-in % [:pprops 47 :outcomes] (vec (conj (get-in % [:pprops 47 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 47 :probs] (vec (conj (get-in % [:pprops 47 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 47 :outcomes] (vec (conj (get-in % [:pprops 47 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 47 :probs] (vec (conj (get-in % [:pprops 47 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 47 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 48 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 48 :instant] 46))
(alter-var-root #'domain-description #(assoc-in % [:pprops 48 :outcomes] (vec (conj (get-in % [:pprops 48 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 48 :probs] (vec (conj (get-in % [:pprops 48 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 48 :outcomes] (vec (conj (get-in % [:pprops 48 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 48 :probs] (vec (conj (get-in % [:pprops 48 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 48 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 49 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 49 :instant] 47))
(alter-var-root #'domain-description #(assoc-in % [:pprops 49 :outcomes] (vec (conj (get-in % [:pprops 49 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 49 :probs] (vec (conj (get-in % [:pprops 49 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 49 :outcomes] (vec (conj (get-in % [:pprops 49 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 49 :probs] (vec (conj (get-in % [:pprops 49 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 49 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 50 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 50 :instant] 48))
(alter-var-root #'domain-description #(assoc-in % [:pprops 50 :outcomes] (vec (conj (get-in % [:pprops 50 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 50 :probs] (vec (conj (get-in % [:pprops 50 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 50 :outcomes] (vec (conj (get-in % [:pprops 50 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 50 :probs] (vec (conj (get-in % [:pprops 50 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 50 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 51 :subject] :reactivation))
(alter-var-root #'domain-description #(assoc-in % [:pprops 51 :instant] 49))
(alter-var-root #'domain-description #(assoc-in % [:pprops 51 :outcomes] (vec (conj (get-in % [:pprops 51 :outcomes]) {:reactivation "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 51 :probs] (vec (conj (get-in % [:pprops 51 :probs]) (/ 8 10000)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 51 :outcomes] (vec (conj (get-in % [:pprops 51 :outcomes]) {:reactivation "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 51 :probs] (vec (conj (get-in % [:pprops 51 :probs]) (- 1 (/ 8 10000))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 51 :precondition] (fn [state] (and (= (list (get-in state (keys {:tuberculosis "latent"}))) (vals {:tuberculosis "latent"})) ))))
(alter-var-root #'domain-language #(assoc % :maxinst 50))
