(def domain-language {})
(def domain-description {})
(alter-var-root #'domain-description #(assoc-in % [:cprops] []))
(alter-var-root #'domain-description #(assoc-in % [:pprops] []))
(alter-var-root #'domain-language #(assoc % :fluents (conj (:fluents domain-language) :bacteria)))
(alter-var-root #'domain-language #(assoc % :fluents (conj (:fluents domain-language) :rash)))
(alter-var-root #'domain-description #(assoc-in % [:iprop :outcomes] []))
(alter-var-root #'domain-description #(assoc-in % [:iprop :outcomes 0] (merge {:rash "present"} {:bacteria "absent"} )))
(alter-var-root #'domain-description #(assoc-in % [:iprop :probs] (vec (conj (get-in % [:iprop :probs]) (/ 1 10)))))
(alter-var-root #'domain-description #(assoc-in % [:iprop :outcomes 1] (merge {:rash "present"} {:bacteria "present"} )))
(alter-var-root #'domain-description #(assoc-in % [:iprop :probs] (vec (conj (get-in % [:iprop :probs]) (/ 9 10)))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 0 :outcomes] []))
(alter-var-root #'domain-description #(assoc-in % [:cprops 0 :precondition] (fn [state] (and (= (list (get-in state (keys {:bacteria "present"}))) (vals {:bacteria "present"})) (= (list (get-in state (keys {:takesMedicine "true"}))) (vals {:takesMedicine "true"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 0 :outcomes 0] (merge {:bacteria "resistant"} )))
(alter-var-root #'domain-description #(assoc-in % [:cprops 0 :probs] (vec (conj (get-in % [:cprops 0 :probs]) (/ 2 10)))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 0 :outcomes 1] (merge {:rash "absent"} {:bacteria "resistant"} )))
(alter-var-root #'domain-description #(assoc-in % [:cprops 0 :probs] (vec (conj (get-in % [:cprops 0 :probs]) (/ 1 10)))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 0 :outcomes 2] (merge {:rash "absent"} {:bacteria "absent"} )))
(alter-var-root #'domain-description #(assoc-in % [:cprops 0 :probs] (vec (conj (get-in % [:cprops 0 :probs]) (/ 7 10)))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 1 :outcomes] []))
(alter-var-root #'domain-description #(assoc-in % [:cprops 1 :precondition] (fn [state] (and (= (list (get-in state (keys {:bacteria "resistant"}))) (vals {:bacteria "resistant"})) (= (list (get-in state (keys {:takesMedicine "true"}))) (vals {:takesMedicine "true"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 1 :outcomes 0] (merge {} )))
(alter-var-root #'domain-description #(assoc-in % [:cprops 1 :probs] (vec (conj (get-in % [:cprops 1 :probs]) (/ 12 13)))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 1 :outcomes 1] (merge {:rash "absent"} {:bacteria "absent"} )))
(alter-var-root #'domain-description #(assoc-in % [:cprops 1 :probs] (vec (conj (get-in % [:cprops 1 :probs]) (/ 1 13)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :subject] :takesMedicine))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :instant] 1))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :outcomes] (vec (conj (get-in % [:pprops 0 :outcomes]) {:takesMedicine "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :probs] (vec (conj (get-in % [:pprops 0 :probs]) 1))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :outcomes] (vec (conj (get-in % [:pprops 0 :outcomes]) {:takesMedicine "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :probs] (vec (conj (get-in % [:pprops 0 :probs]) 0))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :precondition] (fn [state] true)))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :subject] :takesMedicine))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :instant] 3))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :outcomes] (vec (conj (get-in % [:pprops 1 :outcomes]) {:takesMedicine "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :probs] (vec (conj (get-in % [:pprops 1 :probs]) 1))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :outcomes] (vec (conj (get-in % [:pprops 1 :outcomes]) {:takesMedicine "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :probs] (vec (conj (get-in % [:pprops 1 :probs]) 0))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :precondition] (fn [state] true)))
(alter-var-root #'domain-language #(assoc % :actions (conj (:actions domain-language) :takesMedicine)))
(alter-var-root #'domain-language #(assoc % :maxinst 4))
