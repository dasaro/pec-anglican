(def domain-language {})
(def domain-description {})
(alter-var-root #'domain-description #(assoc-in % [:cprops] []))
(alter-var-root #'domain-description #(assoc-in % [:pprops] []))
(alter-var-root #'domain-language #(assoc % :fluents (conj (:fluents domain-language) :f)))
(alter-var-root #'domain-language #(assoc % :actions (conj (:actions domain-language) :a)))
(alter-var-root #'domain-description #(assoc-in % [:iprop :outcomes] (vec (conj (get-in % [:iprop :outcomes]) {:f "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:iprop :probs] (vec (conj (get-in % [:iprop :probs]) 1))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 0 :precondition] (fn [state] (and (= (list (get-in state (keys {:a "true"}))) (vals {:a "true"})) ))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 0 :outcomes] (vec (conj (get-in % [:cprops 0 :outcomes]) {}))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 0 :probs] (vec (conj (get-in % [:cprops 0 :probs]) (/ 4 5)))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 0 :outcomes] (vec (conj (get-in % [:cprops 0 :outcomes]) {:f "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:cprops 0 :probs] (vec (conj (get-in % [:cprops 0 :probs]) (/ 1 5)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :subject] :a))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :instant] 0))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :outcomes] (vec (conj (get-in % [:pprops 0 :outcomes]) {:a "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :probs] (vec (conj (get-in % [:pprops 0 :probs]) (/ 1 2)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :outcomes] (vec (conj (get-in % [:pprops 0 :outcomes]) {:a "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :probs] (vec (conj (get-in % [:pprops 0 :probs]) (- 1 (/ 1 2))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 0 :precondition] (fn [state] true)))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :subject] :a))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :instant] 1))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :outcomes] (vec (conj (get-in % [:pprops 1 :outcomes]) {:a "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :probs] (vec (conj (get-in % [:pprops 1 :probs]) (/ 1 2)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :outcomes] (vec (conj (get-in % [:pprops 1 :outcomes]) {:a "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :probs] (vec (conj (get-in % [:pprops 1 :probs]) (- 1 (/ 1 2))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 1 :precondition] (fn [state] true)))
(alter-var-root #'domain-description #(assoc-in % [:pprops 2 :subject] :a))
(alter-var-root #'domain-description #(assoc-in % [:pprops 2 :instant] 2))
(alter-var-root #'domain-description #(assoc-in % [:pprops 2 :outcomes] (vec (conj (get-in % [:pprops 2 :outcomes]) {:a "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 2 :probs] (vec (conj (get-in % [:pprops 2 :probs]) (/ 1 2)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 2 :outcomes] (vec (conj (get-in % [:pprops 2 :outcomes]) {:a "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 2 :probs] (vec (conj (get-in % [:pprops 2 :probs]) (- 1 (/ 1 2))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 2 :precondition] (fn [state] true)))
(alter-var-root #'domain-description #(assoc-in % [:pprops 3 :subject] :a))
(alter-var-root #'domain-description #(assoc-in % [:pprops 3 :instant] 3))
(alter-var-root #'domain-description #(assoc-in % [:pprops 3 :outcomes] (vec (conj (get-in % [:pprops 3 :outcomes]) {:a "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 3 :probs] (vec (conj (get-in % [:pprops 3 :probs]) (/ 1 2)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 3 :outcomes] (vec (conj (get-in % [:pprops 3 :outcomes]) {:a "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 3 :probs] (vec (conj (get-in % [:pprops 3 :probs]) (- 1 (/ 1 2))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 3 :precondition] (fn [state] true)))
(alter-var-root #'domain-description #(assoc-in % [:pprops 4 :subject] :a))
(alter-var-root #'domain-description #(assoc-in % [:pprops 4 :instant] 4))
(alter-var-root #'domain-description #(assoc-in % [:pprops 4 :outcomes] (vec (conj (get-in % [:pprops 4 :outcomes]) {:a "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 4 :probs] (vec (conj (get-in % [:pprops 4 :probs]) (/ 1 2)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 4 :outcomes] (vec (conj (get-in % [:pprops 4 :outcomes]) {:a "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 4 :probs] (vec (conj (get-in % [:pprops 4 :probs]) (- 1 (/ 1 2))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 4 :precondition] (fn [state] true)))
(alter-var-root #'domain-description #(assoc-in % [:pprops 5 :subject] :a))
(alter-var-root #'domain-description #(assoc-in % [:pprops 5 :instant] 5))
(alter-var-root #'domain-description #(assoc-in % [:pprops 5 :outcomes] (vec (conj (get-in % [:pprops 5 :outcomes]) {:a "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 5 :probs] (vec (conj (get-in % [:pprops 5 :probs]) (/ 1 2)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 5 :outcomes] (vec (conj (get-in % [:pprops 5 :outcomes]) {:a "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 5 :probs] (vec (conj (get-in % [:pprops 5 :probs]) (- 1 (/ 1 2))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 5 :precondition] (fn [state] true)))
(alter-var-root #'domain-description #(assoc-in % [:pprops 6 :subject] :a))
(alter-var-root #'domain-description #(assoc-in % [:pprops 6 :instant] 6))
(alter-var-root #'domain-description #(assoc-in % [:pprops 6 :outcomes] (vec (conj (get-in % [:pprops 6 :outcomes]) {:a "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 6 :probs] (vec (conj (get-in % [:pprops 6 :probs]) (/ 1 2)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 6 :outcomes] (vec (conj (get-in % [:pprops 6 :outcomes]) {:a "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 6 :probs] (vec (conj (get-in % [:pprops 6 :probs]) (- 1 (/ 1 2))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 6 :precondition] (fn [state] true)))
(alter-var-root #'domain-description #(assoc-in % [:pprops 7 :subject] :a))
(alter-var-root #'domain-description #(assoc-in % [:pprops 7 :instant] 7))
(alter-var-root #'domain-description #(assoc-in % [:pprops 7 :outcomes] (vec (conj (get-in % [:pprops 7 :outcomes]) {:a "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 7 :probs] (vec (conj (get-in % [:pprops 7 :probs]) (/ 1 2)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 7 :outcomes] (vec (conj (get-in % [:pprops 7 :outcomes]) {:a "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 7 :probs] (vec (conj (get-in % [:pprops 7 :probs]) (- 1 (/ 1 2))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 7 :precondition] (fn [state] true)))
(alter-var-root #'domain-description #(assoc-in % [:pprops 8 :subject] :a))
(alter-var-root #'domain-description #(assoc-in % [:pprops 8 :instant] 8))
(alter-var-root #'domain-description #(assoc-in % [:pprops 8 :outcomes] (vec (conj (get-in % [:pprops 8 :outcomes]) {:a "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 8 :probs] (vec (conj (get-in % [:pprops 8 :probs]) (/ 1 2)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 8 :outcomes] (vec (conj (get-in % [:pprops 8 :outcomes]) {:a "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 8 :probs] (vec (conj (get-in % [:pprops 8 :probs]) (- 1 (/ 1 2))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 8 :precondition] (fn [state] true)))
(alter-var-root #'domain-description #(assoc-in % [:pprops 9 :subject] :a))
(alter-var-root #'domain-description #(assoc-in % [:pprops 9 :instant] 9))
(alter-var-root #'domain-description #(assoc-in % [:pprops 9 :outcomes] (vec (conj (get-in % [:pprops 9 :outcomes]) {:a "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 9 :probs] (vec (conj (get-in % [:pprops 9 :probs]) (/ 1 2)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 9 :outcomes] (vec (conj (get-in % [:pprops 9 :outcomes]) {:a "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 9 :probs] (vec (conj (get-in % [:pprops 9 :probs]) (- 1 (/ 1 2))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 9 :precondition] (fn [state] true)))
(alter-var-root #'domain-description #(assoc-in % [:pprops 10 :subject] :a))
(alter-var-root #'domain-description #(assoc-in % [:pprops 10 :instant] 10))
(alter-var-root #'domain-description #(assoc-in % [:pprops 10 :outcomes] (vec (conj (get-in % [:pprops 10 :outcomes]) {:a "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 10 :probs] (vec (conj (get-in % [:pprops 10 :probs]) (/ 1 2)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 10 :outcomes] (vec (conj (get-in % [:pprops 10 :outcomes]) {:a "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 10 :probs] (vec (conj (get-in % [:pprops 10 :probs]) (- 1 (/ 1 2))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 10 :precondition] (fn [state] true)))
(alter-var-root #'domain-description #(assoc-in % [:pprops 11 :subject] :a))
(alter-var-root #'domain-description #(assoc-in % [:pprops 11 :instant] 11))
(alter-var-root #'domain-description #(assoc-in % [:pprops 11 :outcomes] (vec (conj (get-in % [:pprops 11 :outcomes]) {:a "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 11 :probs] (vec (conj (get-in % [:pprops 11 :probs]) (/ 1 2)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 11 :outcomes] (vec (conj (get-in % [:pprops 11 :outcomes]) {:a "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 11 :probs] (vec (conj (get-in % [:pprops 11 :probs]) (- 1 (/ 1 2))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 11 :precondition] (fn [state] true)))
(alter-var-root #'domain-description #(assoc-in % [:pprops 12 :subject] :a))
(alter-var-root #'domain-description #(assoc-in % [:pprops 12 :instant] 12))
(alter-var-root #'domain-description #(assoc-in % [:pprops 12 :outcomes] (vec (conj (get-in % [:pprops 12 :outcomes]) {:a "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 12 :probs] (vec (conj (get-in % [:pprops 12 :probs]) (/ 1 2)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 12 :outcomes] (vec (conj (get-in % [:pprops 12 :outcomes]) {:a "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 12 :probs] (vec (conj (get-in % [:pprops 12 :probs]) (- 1 (/ 1 2))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 12 :precondition] (fn [state] true)))
(alter-var-root #'domain-description #(assoc-in % [:pprops 13 :subject] :a))
(alter-var-root #'domain-description #(assoc-in % [:pprops 13 :instant] 13))
(alter-var-root #'domain-description #(assoc-in % [:pprops 13 :outcomes] (vec (conj (get-in % [:pprops 13 :outcomes]) {:a "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 13 :probs] (vec (conj (get-in % [:pprops 13 :probs]) (/ 1 2)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 13 :outcomes] (vec (conj (get-in % [:pprops 13 :outcomes]) {:a "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 13 :probs] (vec (conj (get-in % [:pprops 13 :probs]) (- 1 (/ 1 2))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 13 :precondition] (fn [state] true)))
(alter-var-root #'domain-description #(assoc-in % [:pprops 14 :subject] :a))
(alter-var-root #'domain-description #(assoc-in % [:pprops 14 :instant] 14))
(alter-var-root #'domain-description #(assoc-in % [:pprops 14 :outcomes] (vec (conj (get-in % [:pprops 14 :outcomes]) {:a "true"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 14 :probs] (vec (conj (get-in % [:pprops 14 :probs]) (/ 1 2)))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 14 :outcomes] (vec (conj (get-in % [:pprops 14 :outcomes]) {:a "false"}))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 14 :probs] (vec (conj (get-in % [:pprops 14 :probs]) (- 1 (/ 1 2))))))
(alter-var-root #'domain-description #(assoc-in % [:pprops 14 :precondition] (fn [state] true)))
(alter-var-root #'domain-language #(assoc % :maxinst 15))
